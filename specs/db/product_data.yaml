type: db
identifier: product_data
summary: Product data schema for e-commerce items including specifications like price, processor, RAM, camera, etc.
specification:
  schema:
    tables:
      product_data:
        description: Product data schema for e-commerce items including specifications like price, processor, RAM, camera, etc.
        columns:
          id:
            type: integer
            description: Primary key identifier
            nullable: false
            auto_increment: true
            unique: true
            dbTypes:
              postgresql: SERIAL PRIMARY KEY
              mysql: INT AUTO_INCREMENT PRIMARY KEY
              sqlite: INTEGER PRIMARY KEY AUTOINCREMENT
              mongodb: ObjectId
          name:
            type: string
            description: Product name
            nullable: false
            dbTypes:
              postgresql: VARCHAR(255) NOT NULL
              mysql: VARCHAR(255) NOT NULL
              sqlite: TEXT NOT NULL
              mongodb: String
          price:
            type: decimal
            description: Product price
            nullable: false
            dbTypes:
              postgresql: DECIMAL(10,2) NOT NULL
              mysql: DECIMAL(10,2) NOT NULL
              sqlite: REAL NOT NULL
              mongodb: Decimal128
        primary_key:
          - id
        foreign_keys:
          - columns:
              - product_id
            references:
              table: product
              columns:
                - id
            on_delete: cascade
          - columns:
              - data_id
            references:
              table: data
              columns:
                - id
            on_delete: cascade
        unique_constraints:
          - - product_id
            - data_id
        check_constraints:
          - name: positive_price
            condition: price > 0
            description: Ensure price is positive
    indexes: []
    constraints:
      - name: pk_product_data
        type: primary_key
        table: product_data
        columns:
          - id
        description: Primary key constraint
  behavior:
    migrations:
      - version: '001'
        description: Create product_data table
        up:
          - CREATE TABLE product_data (...)
          - CREATE INDEX idx_product_data_created_at ON product_data(created_at)
        down:
          - DROP INDEX IF EXISTS idx_product_data_created_at
          - DROP TABLE IF EXISTS product_data
        rollback_safe: true
  performance:
    indexing_strategy:
      - Primary key on id column for fast lookups
      - Index on frequently queried columns
      - Composite indexes for multi-column queries
    query_optimization:
      - Use EXPLAIN ANALYZE to identify slow queries
      - Avoid SELECT * in production queries
      - Use appropriate JOIN types for relationships
    connection_pooling:
      min_connections: 5
      max_connections: 20
      idle_timeout: 300
      connection_timeout: 30
  security:
    access_control:
      - role: read_only
        permissions:
          - SELECT
        tables:
          - product_data
        description: Read-only access for reporting
      - role: app_user
        permissions:
          - SELECT
          - INSERT
          - UPDATE
        tables:
          - product_data
        description: Application user with CRUD access
  data_integrity:
    validation_rules:
      - table: product_data
        column: id
        rule: NOT NULL
        description: id is required
        error_message: id cannot be null
      - table: product_data
        column: name
        rule: NOT NULL
        description: name is required
        error_message: name cannot be null
      - table: product_data
        column: price
        rule: NOT NULL
        description: price is required
        error_message: price cannot be null
    referential_integrity:
      - name: enforce_foreign_keys
        description: All foreign key constraints must be enforced
        enforcement: strict
complianceRules:
  - All tables must have a primary key
  - Foreign key constraints must be properly defined
  - Indexes must be created for frequently queried columns
  - Column types must be appropriate for data being stored
  - Migrations must be reversible and safe
  - Access control must follow principle of least privilege
  - Data validation rules must be enforced at database level
